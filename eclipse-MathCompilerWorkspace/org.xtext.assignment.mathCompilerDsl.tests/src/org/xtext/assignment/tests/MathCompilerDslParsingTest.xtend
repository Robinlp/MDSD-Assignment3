/*
 * generated by Xtext 2.24.0
 */
package org.xtext.assignment.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.assignment.mathCompilerDsl.MathLang

import static extension org.xtext.assignment.generator.MathCompilerDslGenerator.compute

@ExtendWith(InjectionExtension)
@InjectWith(MathCompilerDslInjectorProvider)
class MathCompilerDslParsingTest {
	@Inject
	ParseHelper<MathLang> parseHelper
	
	@Test
	def void T01_dummy() {
		Assertions.assertTrue(true)
	}

	@Test
	def void T01_loadModel() {
		val result = parseHelper.parse('''result "T01_loadModel" is 87''')
		Assertions.assertNotNull(result.mathList.get(0))
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void T02_addition() {
		val result = parseHelper.parse('''result "T02_addition" is 80+7''')
		Assertions.assertTrue(result.mathList.get(0).compute==87)
	}

	@Test
	def void T02_addsub() {
		val result = parseHelper.parse('''result "T02_addsub" is 100-20+10-3''')
		Assertions.assertTrue(result.mathList.get(0).compute==87)
	}
	
	@Test
	def void T02_muldiv() {
		val result = parseHelper.parse('''result "T02_muldiv" is 100*20/10*3''')
		Assertions.assertTrue(result.mathList.get(0).compute==600)
	}

	@Test
	def void T02_parens() {
		val result = parseHelper.parse('''result "T02_parens" is (10+3)*7-4''')
		Assertions.assertTrue(result.mathList.get(0).compute==87)
	}
	
	@Test
	def void T03_precedence() {
		val result = parseHelper.parse('''result "T03_precedence" is 10+3*4-12/3+3''')
		Assertions.assertTrue(result.mathList.get(0).compute==21)
	}
	
	@Test
	def void T03_left_assoc_minus() {
		val result = parseHelper.parse('''result "T03_left_assoc_minus" is 10-5-2''')
		Assertions.assertTrue(result.mathList.get(0).compute==3)
	}

	@Test
	def void T03_left_assoc_div() {
		val result = parseHelper.parse('''result "T03_left_assoc_div" is 10/5/2''')
		Assertions.assertTrue(result.mathList.get(0).compute==1)
	}

	@Test
	def void T04_let() {
		val result = parseHelper.parse('''result "T04_let" is let x=10*8 in x+7 end''')
		Assertions.assertTrue(result.mathList.get(0).compute==87)
	}

	@Test
	def void T04_nested_let_other_var() {
		val result = parseHelper.parse('''result "T04_nested_let_other_var" is let x=2 in let y=3 in x*y end + x end + 79''')
		Assertions.assertTrue(result.mathList.get(0).compute==87)
	}

	@Test
	def void T04_nested_let_same_var() {
		val result = parseHelper.parse('''result "T04_nested_let_same_var" is let x=2 in let x=3 in x*x end + x end + 76''')
		Assertions.assertTrue(result.mathList.get(0).compute==87)
	}
}
