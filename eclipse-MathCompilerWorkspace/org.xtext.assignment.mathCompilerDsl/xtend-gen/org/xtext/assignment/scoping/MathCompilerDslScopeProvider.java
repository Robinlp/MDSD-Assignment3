/**
 * generated by Xtext 2.24.0
 */
package org.xtext.assignment.scoping;

import java.util.ArrayList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.assignment.mathCompilerDsl.Let;
import org.xtext.assignment.mathCompilerDsl.Var;
import org.xtext.assignment.scoping.AbstractMathCompilerDslScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MathCompilerDslScopeProvider extends AbstractMathCompilerDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _switchResult = null;
    boolean _matched = false;
    if (context instanceof Var) {
      _matched=true;
      final ArrayList<Let> candidates = new ArrayList<Let>();
      Let nextLet = EcoreUtil2.<Let>getContainerOfType(context, Let.class);
      while ((nextLet != null)) {
        {
          candidates.add(nextLet);
          nextLet = EcoreUtil2.<Let>getContainerOfType(nextLet.eContainer(), Let.class);
        }
      }
      return Scopes.scopeFor(candidates);
    }
    if (!_matched) {
      _switchResult = super.getScope(context, reference);
    }
    return _switchResult;
  }
}
