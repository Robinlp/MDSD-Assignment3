/**
 * generated by Xtext 2.24.0
 */
package org.xtext.assignment.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.assignment.mathCompilerDsl.Div;
import org.xtext.assignment.mathCompilerDsl.Expression;
import org.xtext.assignment.mathCompilerDsl.Let;
import org.xtext.assignment.mathCompilerDsl.MathExp;
import org.xtext.assignment.mathCompilerDsl.MathLang;
import org.xtext.assignment.mathCompilerDsl.Minus;
import org.xtext.assignment.mathCompilerDsl.Mult;
import org.xtext.assignment.mathCompilerDsl.Plus;
import org.xtext.assignment.mathCompilerDsl.Var;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathCompilerDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathLang math = Iterators.<MathLang>filter(resource.getAllContents(), MathLang.class).next();
    final List<Integer> result = MathCompilerDslGenerator.compute(math);
    final List<String> resultText = MathCompilerDslGenerator.displayMath(math);
    final StringBuilder sb = new StringBuilder();
    for (int i = 0; (i < result.size()); i++) {
      {
        String _get = resultText.get(i);
        String _plus = (_get + " = ");
        Integer _get_1 = result.get(i);
        String _plus_1 = (_plus + _get_1);
        sb.append(_plus_1);
        sb.append("\n");
      }
    }
    JOptionPane.showMessageDialog(null, sb.toString(), "Math Language", JOptionPane.INFORMATION_MESSAGE);
    fsa.generateFile("MathComputation.java", this.generateJava(math));
  }
  
  protected String _generateJava(final MathLang math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("public class MathComputation {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) throws Exception {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MathComputation mc = new MathComputation();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mc.compute();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void compute() {");
    _builder.newLine();
    _builder.append("      ");
    String _generateJavaMath = MathCompilerDslGenerator.generateJavaMath(math);
    _builder.append(_generateJavaMath, "      ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  public static List<Integer> compute(final MathLang math) {
    final List<Integer> list = new ArrayList<Integer>();
    EList<MathExp> _mathList = math.getMathList();
    for (final MathExp mathExp : _mathList) {
      list.add(Integer.valueOf(MathCompilerDslGenerator.compute(mathExp)));
    }
    return list;
  }
  
  public static int compute(final MathExp math) {
    return MathCompilerDslGenerator.computeExp(math.getExp());
  }
  
  public static int computeExpEnv(final Expression exp, final Map<String, Integer> env) {
    Integer _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExpEnv = MathCompilerDslGenerator.computeExpEnv(((Plus)exp).getLeft(), env);
      int _computeExpEnv_1 = MathCompilerDslGenerator.computeExpEnv(((Plus)exp).getRight(), env);
      _switchResult = Integer.valueOf((_computeExpEnv + _computeExpEnv_1));
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExpEnv = MathCompilerDslGenerator.computeExpEnv(((Minus)exp).getLeft(), env);
        int _computeExpEnv_1 = MathCompilerDslGenerator.computeExpEnv(((Minus)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExpEnv - _computeExpEnv_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExpEnv = MathCompilerDslGenerator.computeExpEnv(((Mult)exp).getLeft(), env);
        int _computeExpEnv_1 = MathCompilerDslGenerator.computeExpEnv(((Mult)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExpEnv * _computeExpEnv_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExpEnv = MathCompilerDslGenerator.computeExpEnv(((Div)exp).getLeft(), env);
        int _computeExpEnv_1 = MathCompilerDslGenerator.computeExpEnv(((Div)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExpEnv / _computeExpEnv_1));
      }
    }
    if (!_matched) {
      if (exp instanceof org.xtext.assignment.mathCompilerDsl.Number) {
        _matched=true;
        _switchResult = Integer.valueOf(((org.xtext.assignment.mathCompilerDsl.Number)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = env.get(((Var)exp).getRef().getName());
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        _switchResult = Integer.valueOf(MathCompilerDslGenerator.computeExpEnv(((Let)exp).getBody(), MathCompilerDslGenerator.bind(env, ((Let)exp).getName(), MathCompilerDslGenerator.computeExpEnv(((Let)exp).getBinding(), env))));
      }
    }
    if (!_matched) {
      throw new Error("Internal error");
    }
    return (_switchResult).intValue();
  }
  
  public static Map<String, Integer> bind(final Map<String, Integer> env1, final String name, final int value) {
    HashMap<String, Integer> _xblockexpression = null;
    {
      final HashMap<String, Integer> env2 = new HashMap<String, Integer>(env1);
      env2.put(name, Integer.valueOf(value));
      _xblockexpression = env2;
    }
    return _xblockexpression;
  }
  
  public static int computeExp(final Expression exp) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExp = MathCompilerDslGenerator.computeExp(((Plus)exp).getLeft());
      int _computeExp_1 = MathCompilerDslGenerator.computeExp(((Plus)exp).getRight());
      _switchResult = (_computeExp + _computeExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExp = MathCompilerDslGenerator.computeExp(((Minus)exp).getLeft());
        int _computeExp_1 = MathCompilerDslGenerator.computeExp(((Minus)exp).getRight());
        _switchResult = (_computeExp - _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExp = MathCompilerDslGenerator.computeExp(((Mult)exp).getLeft());
        int _computeExp_1 = MathCompilerDslGenerator.computeExp(((Mult)exp).getRight());
        _switchResult = (_computeExp * _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExp = MathCompilerDslGenerator.computeExp(((Div)exp).getLeft());
        int _computeExp_1 = MathCompilerDslGenerator.computeExp(((Div)exp).getRight());
        _switchResult = (_computeExp / _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof org.xtext.assignment.mathCompilerDsl.Number) {
        _matched=true;
        _switchResult = ((org.xtext.assignment.mathCompilerDsl.Number)exp).getValue();
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = MathCompilerDslGenerator.computeExp(((Var)exp).getRef().getBinding());
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        _switchResult = MathCompilerDslGenerator.computeExp(((Let)exp).getBody());
      }
    }
    if (!_matched) {
      throw new Error("Internal error");
    }
    return _switchResult;
  }
  
  public static List<String> displayMath(final MathLang math) {
    final List<String> list = new ArrayList<String>();
    EList<MathExp> _mathList = math.getMathList();
    for (final MathExp mathExp : _mathList) {
      String _expName = mathExp.getExpName();
      String _plus = (_expName + " ");
      String _display = MathCompilerDslGenerator.display(mathExp);
      String _plus_1 = (_plus + _display);
      list.add(_plus_1);
    }
    return list;
  }
  
  public static String display(final MathExp math) {
    return MathCompilerDslGenerator.display(math.getExp());
  }
  
  public static String display(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      String _display = MathCompilerDslGenerator.display(((Plus)exp).getLeft());
      String _plus = ("(" + _display);
      String _plus_1 = (_plus + "+");
      String _display_1 = MathCompilerDslGenerator.display(((Plus)exp).getRight());
      String _plus_2 = (_plus_1 + _display_1);
      _switchResult = (_plus_2 + ")");
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        String _display = MathCompilerDslGenerator.display(((Minus)exp).getLeft());
        String _plus = ("(" + _display);
        String _plus_1 = (_plus + "-");
        String _display_1 = MathCompilerDslGenerator.display(((Minus)exp).getRight());
        String _plus_2 = (_plus_1 + _display_1);
        _switchResult = (_plus_2 + ")");
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        String _display = MathCompilerDslGenerator.display(((Mult)exp).getLeft());
        String _plus = (_display + "*");
        String _display_1 = MathCompilerDslGenerator.display(((Mult)exp).getRight());
        _switchResult = (_plus + _display_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        String _display = MathCompilerDslGenerator.display(((Div)exp).getLeft());
        String _plus = (_display + "/");
        String _display_1 = MathCompilerDslGenerator.display(((Div)exp).getRight());
        _switchResult = (_plus + _display_1);
      }
    }
    if (!_matched) {
      if (exp instanceof org.xtext.assignment.mathCompilerDsl.Number) {
        _matched=true;
        _switchResult = Integer.toString(((org.xtext.assignment.mathCompilerDsl.Number)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = ((Var)exp).getRef().getName();
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("let ");
        String _name = ((Let)exp).getName();
        _builder.append(_name);
        _builder.append(" = ");
        String _display = MathCompilerDslGenerator.display(((Let)exp).getBinding());
        _builder.append(_display);
        _builder.append(" in ");
        String _display_1 = MathCompilerDslGenerator.display(((Let)exp).getBody());
        _builder.append(_display_1);
        _builder.append("  end");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      throw new Error("Internal error");
    }
    return _switchResult;
  }
  
  public static String generateJavaMath(final MathLang math) {
    final List<String> list = new ArrayList<String>();
    EList<MathExp> _mathList = math.getMathList();
    for (final MathExp mathExp : _mathList) {
      String _expName = mathExp.getExpName();
      String _plus = ("System.out.println(\"" + _expName);
      String _plus_1 = (_plus + " \" + ");
      String _display = MathCompilerDslGenerator.display(mathExp);
      String _plus_2 = (_plus_1 + _display);
      String _plus_3 = (_plus_2 + ");");
      list.add(_plus_3);
    }
    final StringBuilder sb = new StringBuilder();
    for (final String s : list) {
      {
        sb.append(s);
        sb.append("\n");
      }
    }
    return sb.toString();
  }
  
  public String generateJava(final MathLang math) {
    return _generateJava(math);
  }
}
