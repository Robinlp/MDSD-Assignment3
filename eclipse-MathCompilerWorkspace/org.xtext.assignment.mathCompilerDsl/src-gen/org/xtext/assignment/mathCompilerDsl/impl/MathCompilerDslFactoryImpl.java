/**
 * generated by Xtext 2.24.0
 */
package org.xtext.assignment.mathCompilerDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.assignment.mathCompilerDsl.Div;
import org.xtext.assignment.mathCompilerDsl.Expression;
import org.xtext.assignment.mathCompilerDsl.Let;
import org.xtext.assignment.mathCompilerDsl.MathCompilerDslFactory;
import org.xtext.assignment.mathCompilerDsl.MathCompilerDslPackage;
import org.xtext.assignment.mathCompilerDsl.MathExp;
import org.xtext.assignment.mathCompilerDsl.MathLang;
import org.xtext.assignment.mathCompilerDsl.Minus;
import org.xtext.assignment.mathCompilerDsl.Mult;
import org.xtext.assignment.mathCompilerDsl.Plus;
import org.xtext.assignment.mathCompilerDsl.Var;
import org.xtext.assignment.mathCompilerDsl.VariableBinding;
import org.xtext.assignment.mathCompilerDsl.VariableUse;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MathCompilerDslFactoryImpl extends EFactoryImpl implements MathCompilerDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MathCompilerDslFactory init()
  {
    try
    {
      MathCompilerDslFactory theMathCompilerDslFactory = (MathCompilerDslFactory)EPackage.Registry.INSTANCE.getEFactory(MathCompilerDslPackage.eNS_URI);
      if (theMathCompilerDslFactory != null)
      {
        return theMathCompilerDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MathCompilerDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathCompilerDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MathCompilerDslPackage.MATH_LANG: return createMathLang();
      case MathCompilerDslPackage.MATH_EXP: return createMathExp();
      case MathCompilerDslPackage.EXPRESSION: return createExpression();
      case MathCompilerDslPackage.VARIABLE_BINDING: return createVariableBinding();
      case MathCompilerDslPackage.VARIABLE_USE: return createVariableUse();
      case MathCompilerDslPackage.NUMBER: return createNumber();
      case MathCompilerDslPackage.PLUS: return createPlus();
      case MathCompilerDslPackage.MINUS: return createMinus();
      case MathCompilerDslPackage.MULT: return createMult();
      case MathCompilerDslPackage.DIV: return createDiv();
      case MathCompilerDslPackage.LET: return createLet();
      case MathCompilerDslPackage.VAR: return createVar();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathLang createMathLang()
  {
    MathLangImpl mathLang = new MathLangImpl();
    return mathLang;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathExp createMathExp()
  {
    MathExpImpl mathExp = new MathExpImpl();
    return mathExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableBinding createVariableBinding()
  {
    VariableBindingImpl variableBinding = new VariableBindingImpl();
    return variableBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableUse createVariableUse()
  {
    VariableUseImpl variableUse = new VariableUseImpl();
    return variableUse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.assignment.mathCompilerDsl.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mult createMult()
  {
    MultImpl mult = new MultImpl();
    return mult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Div createDiv()
  {
    DivImpl div = new DivImpl();
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Let createLet()
  {
    LetImpl let = new LetImpl();
    return let;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathCompilerDslPackage getMathCompilerDslPackage()
  {
    return (MathCompilerDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MathCompilerDslPackage getPackage()
  {
    return MathCompilerDslPackage.eINSTANCE;
  }

} //MathCompilerDslFactoryImpl
