/*
 * generated by Xtext 2.24.0
 */
package org.xtext.assignment.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.assignment.mathCompilerDsl.Var
import java.util.ArrayList
import org.xtext.assignment.mathCompilerDsl.Let
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathCompilerDslScopeProvider extends AbstractMathCompilerDslScopeProvider {
	override getScope(EObject context, EReference reference) {
		switch context {
			Var: {
				val candidates = new ArrayList<Let>
				var Let nextLet = EcoreUtil2.getContainerOfType(context,Let)
				while(nextLet!==null) {
					candidates.add(nextLet)
					nextLet = EcoreUtil2.getContainerOfType(nextLet.eContainer,Let)
				}
				return Scopes.scopeFor(candidates)
			}
			default: super.getScope(context,reference)
		}
	}
}
